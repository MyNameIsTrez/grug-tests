name: CI Build (Reusable)

on:
  workflow_call:

jobs:
  build-ubuntu-clang:
    name: ubuntu-clang
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # This is required for `./grug-tests/tests.sh` and
      # `hashFiles('grug-tests/.github/workflows/*.yml')`.
      # `./tests.sh` doesn't exist when this yml file is used by the grug repo's CI.
      - &checkout-grug-tests
        name: Checkout grug-tests workflow repo
        uses: actions/checkout@v4
        with:
          repository: MyNameIsTrez/grug-tests
          path: grug-tests

      - &apt-cache
        name: Cache workspace-local apt packages
        uses: actions/cache@v3
        with:
          path: grug-tests/.apt-cache/*.deb
          # Use workflow hash to invalidate the cache only when the workflow changes.
          key: apt-cache-${{ runner.os }}-${{ hashFiles('grug-tests/.github/workflows/*.yml') }}
          restore-keys: |
            apt-cache-${{ runner.os }}-

      - &apt-install
        name: Update apt and install nasm
        run: |
          # This runner doesn't have the rights to write to the default apt cache.
          mkdir -p grug-tests/.apt-cache
          # Only downloads indexes, which is very fast.
          sudo apt-get update
          # Uses the cached .deb, if the nasm version hasn't changed.
          sudo apt-get install -y -o Dir::Cache::archives=$PWD/grug-tests/.apt-cache nasm

      - &get-grug-source
        name: Get grug source
        run: |
          if [ "${{ github.repository }}" = "MyNameIsTrez/grug-tests" ]; then
            echo "Running standalone in grug-tests; clone grug"
            git clone https://github.com/MyNameIsTrez/grug grug
            GRUG_PATH=$(realpath grug)
          else
            echo "Running from grug; use caller repo"
            GRUG_PATH=$(pwd)
          fi
          # Make GRUG_PATH available to subsequent steps
          echo "GRUG_PATH=$GRUG_PATH" >> $GITHUB_ENV
          echo "GRUG_PATH is $GRUG_PATH"

      - name: Run the tests
        run: |
          cd grug-tests
          ./tests.sh $GRUG_PATH

  build-ubuntu-clang-asan:
    name: ubuntu-clang-asan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - *checkout-grug-tests
      - *apt-cache
      - *apt-install
      - *get-grug-source

      - name: Run the tests
        run: |
          cd grug-tests
          ./tests.sh $GRUG_PATH
        env:
          ASAN: 1
          SHUFFLES: 10

  build-ubuntu-clang-valgrind:
    name: ubuntu-clang-valgrind
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - *checkout-grug-tests
      - *apt-cache
      - *apt-install
      - *get-grug-source

      - &install-valgrind
        name: Install valgrind
        run: sudo apt install valgrind

      - name: Run the tests
        run: |
          cd grug-tests
          ./tests.sh $GRUG_PATH
        env:
          VALGRIND: 1
          SHUFFLES: 10

  build-ubuntu-libfuzzer:
    name: ubuntu-libfuzzer
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - *checkout-grug-tests
      - *apt-cache
      - *apt-install
      - *get-grug-source

      - name: Compile executable
        run: |
          cd grug-tests
          clang $GRUG_PATH/grug.c fuzz.c -I$GRUG_PATH -std=gnu2x -Wall -Wextra -Werror -Wpedantic -Wstrict-prototypes -Wshadow -Wuninitialized -Wfatal-errors -Wno-language-extension-token -Wno-unused-parameter -g -rdynamic -fsanitize=address,undefined,fuzzer -Og -DCRASH_ON_UNREACHABLE

      - name: Create test_corpus directory
        run: |
          cd grug-tests
          mkdir -p test_corpus

      - name: Copy tests to test_corpus
        run: |
          cd grug-tests
          for d in tests/err/* tests/err_runtime/* tests/ok/*; do name=${d##*/}; cp $d/*.grug test_corpus/$name.grug; done

      - name: Create corpus directory
        run: |
          cd grug-tests
          mkdir -p corpus

      - name: Merge test_corpus to corpus
        run: |
          cd grug-tests
          ./a.out -merge=1 corpus test_corpus

      - name: Fuzz for 1 minute
        run: |
          cd grug-tests
          ./a.out corpus -use_value_profile=1 -timeout=1 -max_total_time=60

  build-ubuntu-gcc:
    name: ubuntu-gcc
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - *checkout-grug-tests
      - *apt-cache
      - *apt-install
      - *get-grug-source

      - name: Run the tests
        run: |
          cd grug-tests
          ./tests.sh $GRUG_PATH
        env:
          CC: gcc

  build-ubuntu-gcc-asan:
    name: ubuntu-gcc-asan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - *checkout-grug-tests
      - *apt-cache
      - *apt-install
      - *get-grug-source

      - name: Run the tests
        run: |
          cd grug-tests
          ./tests.sh $GRUG_PATH
        env:
          CC: gcc
          ASAN: 1

  build-ubuntu-gcc-valgrind:
    name: ubuntu-gcc-valgrind
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - *checkout-grug-tests
      - *apt-cache
      - *apt-install
      - *get-grug-source
      - *install-valgrind

      - name: Run the tests
        run: |
          cd grug-tests
          ./tests.sh $GRUG_PATH
        env:
          CC: gcc
          VALGRIND: 1

  # TODO: This is supposed to emulate Android, but I'm not sure whether it's working,
  # since the `script: lsb_release -a && uname -a` prints Ubuntu 22.04,
  # which seems like the job container's linux version, so not the Android version
  # This code is the first snippet from the "Usage & Examples" section here:
  # https://github.com/marketplace/actions/android-emulator-runner
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v4

  #     - name: Enable KVM
  #       run: |
  #         echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
  #         sudo udevadm control --reload-rules
  #         sudo udevadm trigger --name-match=kvm

  #     - name: run tests
  #       uses: reactivecircus/android-emulator-runner@v2
  #       with:
  #         api-level: 29
  #         script: lsb_release -a && uname -a

  # TODO: REMOVE!
  # build-foo-clang:
  #   name: foo-clang
  #   runs-on: macos-latest

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Print clang version
  #       run: clang --version

  #     - name: Build
  #       run: clang foo.c -o foo -Wfatal-errors

  #     - name: Run
  #       run: ./foo

  # TODO: REMOVE!
  # build-foo-gcc:
  #   name: foo-gcc
  #   runs-on: macos-latest

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Build
  #       # `gcc` is a nasty symlink to clang, so we use the absolute path of gcc here
  #       run: /opt/homebrew/Cellar/gcc/14.2.0/bin/gcc-14 foo.c -o foo -Wfatal-errors -Wno-pragmas

  #     - name: Run
  #       run: ./foo

  # Use this to test ARM support in grug.c:
  # build-mac-clang-arm:
  #   name: mac-clang-arm
  #   runs-on: macos-latest

  #   steps:
  #     - uses: actions/checkout@v4

  #     # TODO: Put this back!
  #     # - name: Clone the grug submodule
  #     #   run: git submodule update --init
  #     - name: Add leading underscore to labels, because dlsym() on Macho-O can't load symbols without them
  #       # For some godforsaken reason `+` nor `\+` here works with sed, but `*` does.
  #       # I haven't been able to figure out why.
  #       # See these links for more cursed information about our version of sed:
  #       # https://stackoverflow.com/a/23146221/13279557
  #       # https://stackoverflow.com/a/12180129/13279557
  #       # https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap09.html#tag_09_04
  #       # https://en.wikibooks.org/wiki/Regular_Expressions/POSIX-Extended_Regular_Expressions
  #       run: sed -i -E "s/^\([[:alnum:]_]*\):/_\1:/" demo_arm64.s &&
  #         sed -i -E "s/^\.global \([[:alnum:]_]*\)/.global _\1/" demo_arm64.s &&
  #         sed -i -E "s/^\.extern \([[:alnum:]_]*\)/.extern _\1/" demo_arm64.s

  #     - name: cat demo_arm64.s
  #       run: cat demo_arm64.s

  #     - name: Assemble demo_arm64.s
  #       run: clang demo_arm64.s -o demo_arm64.dylib -shared

  #     - name: Compile demo_arm64_main.c
  #       # -rdynamic allows demo_arm64.dylib to call functions from demo_arm64_main.c
  #       run: clang demo_arm64_main.c -o demo_arm64_main -g -fsanitize=address,undefined -rdynamic

  #     - name: Run demo_arm64_main
  #       run: ./demo_arm64_main

  #     # - name: Run the tests
  #     #   run: ./tests.sh

  # build-mac-clang-asan:
  #   name: mac-clang-asan
  #   runs-on: macos-latest

  #   steps:
  #     - uses: actions/checkout@v4

  # TODO: Copy what goes here from the mac-clang job

  #     - name: Run the tests
  #       run: ./tests.sh
  #       env:
  #         ASAN: 1

  # TODO: Add linux-arm64 once it is public to open-source projects:
  # https://github.com/orgs/community/discussions/19197#discussioncomment-10550689
  # https://github.com/github/roadmap/issues/960
  # build-linux-clang-arm64:
  #   name: linux-clang-arm64
  #   runs-on: linux-arm64

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Hello, ARM!
  #       run: echo "Hello, ARM!"
